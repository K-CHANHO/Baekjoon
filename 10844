import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

class Main {
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static int n;
	static Long[][] dp;
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		n = Integer.parseInt(br.readLine());
		
		dp = new Long[n+1][10];

		for(int i=0; i<10; i++) {
			dp[1][i] = 1L;
		}
		
		long res = 0;
		for(int i=1; i<10; i++) {
			res += solution(n, i);
		}
	

		System.out.println(res % 1000000000);
	}
	
	static Long solution(int digit, int val) {
		if(digit == 1) return dp[digit][val];
		if(dp[digit][val] == null) {
			if(val == 0) {
				dp[digit][val] = solution(digit-1, 1);
			}
			else if(val == 9) {
				dp[digit][val] = solution(digit-1, 8);
			}
			else {
				dp[digit][val] = solution(digit-1, val + 1) + solution(digit-1, val - 1);
			}
		}
		
		return dp[digit][val] % 1000000000;
	}
}
