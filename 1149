import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

class Main {
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static int[][] arr, dp;
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());
		
		arr = new int[N][3];
		for(int i=0; i<N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			arr[i][0] = Integer.parseInt(st.nextToken()); // RED
			arr[i][1] = Integer.parseInt(st.nextToken()); // GREEN
			arr[i][2] = Integer.parseInt(st.nextToken()); // BLUE
		}
		
		dp = new int[N][3];
		dp[0][0] = arr[0][0];
		dp[0][1] = arr[0][1];
		dp[0][2] = arr[0][2];
		
		int minR = solution(N-1, 0);
		int minG = solution(N-1, 1);
		int minB = solution(N-1, 2);
		
		int answer = Math.min(minR, Math.min(minG, minB));
		System.out.print(answer);
	}
	
	static int solution(int N, int c) {
		if(dp[N][c]==0) {
			if(c==0) {
				dp[N][c] = Math.min(solution(N-1,1), solution(N-1,2)) + arr[N][0];
			}
			else if(c==1) {
				dp[N][c] = Math.min(solution(N-1,0), solution(N-1,2)) + arr[N][1];
			}
			else if(c==2) {
				dp[N][c] = Math.min(solution(N-1,1), solution(N-1,0)) + arr[N][2];
			}
		}
		return dp[N][c];
	}
}
